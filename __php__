<?php

// Gestion des erreurs fatales en envoyant une erreur 500
function fatalErrorHandler() {
    $last_error = error_get_last();

    if ($last_error) {
        if ($last_error['type'] == E_ERROR || $last_error['type'] == E_USER_ERROR) {
            header("HTTP/1.1 500 Internal Server Error");

            $last_error["time"] = time();

            if (!ENABLE_FILES_VIEW) {
                unset($last_error["file"]);
                unset($last_error["line"]);
            }

            echo json_encode($last_error);
        }
    }
}
register_shutdown_function('fatalErrorHandler');

const ENABLE_FILES_VIEW = false;

// DÃ©but de session
session_start();

// Affichage des message de debug
ini_set("display_errors", 0);
ini_set("display_startup_errors", 1);
error_reporting(E_ALL);

// Ajout de /FeelingsDiary au path
set_include_path(get_include_path() . PATH_SEPARATOR . $_SERVER["DOCUMENT_ROOT"] . "FeelingsDiary");
$_ENV["ROOT_PATH"] = $_SERVER["DOCUMENT_ROOT"] . "FeelingsDiary" . DIRECTORY_SEPARATOR;

// Headers
header("Access-Control-Allow-Origin: *");
header("Accept: application/json");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: GET, POST, PATCH, DELETE");
header("Access-Control-Max-Age: 3600");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");
header("Cache-Control: no-cache, must-revalidate");
header("Pragma: no-cache");

$_PATCH = null;
$_DELETE = null;

// Gestion des mÃ©thodes PATCH et DELETE
switch ($_SERVER["REQUEST_METHOD"]) {
    case "POST":
        if (empty($_POST)) {
            $_POST = json_decode(file_get_contents('php://input'), true);

            if (is_null($_POST)) {
                $_POST = $_REQUEST;
            }
        }
        break;

    case "PATCH":
        parse_str(file_get_contents('php://input'), $_PATCH);
        break;

    case "DELETE":
        parse_str(file_get_contents('php://input'), $_DELETE);
        break;

    default:
        break;
}

// Fichiers gÃ©nÃ©raux
require_once "shared/database/Database.php";
require_once "shared/response/Response.php";
require_once "shared/response/ResponseCode.php";
require_once "shared/response/ResponseType.php";

if (isset($_ENV["ALLOWED_METHODS"])) {
    $ok = false;

    if (is_array($_ENV["ALLOWED_METHODS"])) {
        foreach ($_ENV["ALLOWED_METHODS"] as $value) {
            if ($value === $_SERVER["REQUEST_METHOD"]) {
                $ok = true;
            }
        }
    }
    else if (is_string($_ENV["ALLOWED_METHODS"])) {
        $ok = ($_ENV["ALLOWED_METHODS"] === $_SERVER["REQUEST_METHOD"]);
    }

    if (!$ok) {
        Response::builder()
            ->setHttpCode(ResponseCode::METHOD_NOT_ALLOWED)
            ->setPayload(
                array("method" => $_SERVER["REQUEST_METHOD"])
            )
            ->setCustomCode(1)
            ->setMessage("Method not allowed, like using POST in a GET-only request")
            ->send();
    }
}
