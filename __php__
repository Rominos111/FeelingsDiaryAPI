<?php

/**
 * Autorise la vue des fichiers ou non
 */
const ENABLE_FILES_VIEW = false;

// Gestion des erreurs fatales en envoyant une erreur 500 et en détaillant le problème en JSON
function fatalErrorHandler() {
    $last_error = error_get_last();

    if ($last_error) {
        if ($last_error["type"] == E_ERROR || $last_error["type"] == E_USER_ERROR) {
            header($_SERVER["SERVER_PROTOCOL"] . " 500 Internal Server Error");

            $last_error["time"] = time();

            if (!ENABLE_FILES_VIEW) {
                unset($last_error["file"]);
                unset($last_error["line"]);
            }

            echo json_encode($last_error);
        }
    }
}
register_shutdown_function("fatalErrorHandler");

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Début de session
session_start();

// Affichage des message de debug
ini_set("display_errors", 0);
ini_set("display_startup_errors", 1);
error_reporting(E_ALL);

// Ajout de /FeelingsDiary au path
set_include_path(get_include_path() . PATH_SEPARATOR . $_SERVER["DOCUMENT_ROOT"] . "FeelingsDiary");
$_ENV["ROOT_PATH"] = $_SERVER["DOCUMENT_ROOT"] . "FeelingsDiary" . DIRECTORY_SEPARATOR;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gestion des méthodes PATCH et DELETE

$_PATCH = null;
$_DELETE = null;

switch ($_SERVER["REQUEST_METHOD"]) {
    case "POST":
        if (empty($_POST)) {
            $_POST = json_decode(file_get_contents('php://input'), true);

            if (is_null($_POST)) {
                $_POST = $_REQUEST;
            }
        }
        break;

    case "PATCH":
        parse_str(file_get_contents('php://input'), $_PATCH);
        break;

    case "DELETE":
        // parse_str(file_get_contents('php://input'), $_DELETE);
        $_DELETE = json_decode(file_get_contents('php://input'), true);
        break;

    default:
        break;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fichiers généraux

require_once "shared/JWT/JWT.php";
require_once "shared/JWT/JWTResponse.php";
require_once "shared/database/Database.php";
require_once "shared/response/Response.php";
require_once "shared/response/ResponseCode.php";
require_once "shared/response/ResponseType.php";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gestion des méthodes autorisées

assert(!is_null($_ENV["EXPECTED"]));
assert(!is_null($_ENV["EXPECTED"]["methods"]));
assert(!is_null($_ENV["EXPECTED"]["args"]));

$ok = false;
$methods = "";

if (is_array($_ENV["EXPECTED"]["methods"])) {
    foreach ($_ENV["EXPECTED"]["methods"] as $value) {
        $methods .= $value . ", ";

        if ($value === $_SERVER["REQUEST_METHOD"]) {
            $ok = true;
        }
    }
}
else if (is_string($_ENV["EXPECTED"]["methods"])) {
    $ok = ($_ENV["EXPECTED"]["methods"] === $_SERVER["REQUEST_METHOD"]);
    $methods .= $_ENV["EXPECTED"]["methods"] . ", ";
}

$methods = substr($methods, 0, -2);

// Méthodes autorisées
header("Allow: $methods", true);
// Méthodes autorisées
header("Access-Control-Allow-Methods: $methods", true);

if (!$ok) {
    Response::builder()
        ->setHttpCode(ResponseCode::METHOD_NOT_ALLOWED)
        ->setPayload(
            array(
                "method" => $_SERVER["REQUEST_METHOD"],
                "expected" => $_ENV["EXPECTED"]["methods"]
            )
        )
        ->setMessage("Method not allowed, like using POST in a GET-only request")
        ->send();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gestion des arguments

$METHOD = "_" . $_SERVER['REQUEST_METHOD'];
$METHOD = $$METHOD;

$missing = false;
$missingArray = array();

foreach ($_ENV["EXPECTED"]["args"] as $name => $type) {
    switch (gettype($type)) {
        case gettype(0):
            $func = "is_numeric";
            break;
        case gettype(array()):
            $func = "is_array";
            break;

        case gettype(""):
        default:
            $func = "is_string";
            break;
    }

    if (isset($METHOD[$name])) {
        if (!$func($METHOD[$name])) {
            Response::wrongDataType($name, $METHOD[$name], $type)->send();
        }
    }
    else {
        $missingArray[$name] = gettype($type);
        $missing = true;
    }
}

if ($missing) {
    Response::missingArgumentsFromArray($missingArray)->send();
}
